// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"time"

	"github.com/99designs/gqlgen/graphql"
)

type GroupRoomUser struct {
	Room *GroupRoom `json:"room"`
	User *User      `json:"user"`
}

type InputFriend struct {
	UserOne string `json:"user_one"`
	UserTwo string `json:"user_two"`
}

type LoginResponse struct {
	Token string `json:"token"`
	User  *User  `json:"user"`
}

type NewComment struct {
	UserID string  `json:"userId"`
	PostID string  `json:"postId"`
	Parent *string `json:"parent,omitempty"`
	Text   string  `json:"text"`
}

type NewGroup struct {
	Name    string          `json:"name"`
	Privacy string          `json:"privacy"`
	Image   *graphql.Upload `json:"image,omitempty"`
}

type NewGroupChat struct {
	GroupRoomID string          `json:"groupRoomId"`
	UserID      string          `json:"userId"`
	Message     string          `json:"message"`
	File        *graphql.Upload `json:"file,omitempty"`
}

type NewMember struct {
	UserID    string `json:"userId"`
	GroupID   string `json:"groupId"`
	Role      string `json:"role"`
	Confirmed bool   `json:"confirmed"`
}

type NewMessage struct {
	RoomID  string          `json:"roomID"`
	UserID  string          `json:"userId"`
	Message string          `json:"message"`
	File    *graphql.Upload `json:"file,omitempty"`
}

type NewNotification struct {
	SenderID   string  `json:"senderId"`
	ReceiverID *string `json:"receiverId,omitempty"`
	Message    string  `json:"message"`
	Content    *string `json:"content,omitempty"`
	Type       string  `json:"type"`
}

type NewPost struct {
	UserID  string            `json:"userId"`
	Content string            `json:"content"`
	File    []*graphql.Upload `json:"file"`
	Privacy string            `json:"privacy"`
	GroupID *string           `json:"groupId,omitempty"`
}

type NewRoom struct {
	UserOneID string `json:"user_one_id"`
	UserTwoID string `json:"user_two_id"`
}

type NewStory struct {
	UserID  string `json:"userId"`
	File    string `json:"file"`
	Privacy string `json:"privacy"`
}

type NewUser struct {
	Firstname string          `json:"firstname"`
	Lastname  string          `json:"lastname"`
	Email     string          `json:"email"`
	Password  string          `json:"password"`
	Dob       time.Time       `json:"dob"`
	Gender    string          `json:"gender"`
	Image     *graphql.Upload `json:"image,omitempty"`
}

type OldUser struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type PageInfo struct {
	EndCursor   *string `json:"endCursor,omitempty"`
	HasNextPage bool    `json:"hasNextPage"`
}

type PostConnection struct {
	Edges    []*PostEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type PostEdge struct {
	Cursor string `json:"cursor"`
	Node   *Post  `json:"node,omitempty"`
}

type UserConnection struct {
	Edges    []*UserEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type UserEdge struct {
	Cursor string `json:"cursor"`
	Node   *User  `json:"node,omitempty"`
}

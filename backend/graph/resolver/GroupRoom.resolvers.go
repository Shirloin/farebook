package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/shirloin/backend/graph"
	"github.com/shirloin/backend/graph/model"
	"github.com/shirloin/backend/service"
)

// Group is the resolver for the group field.
func (r *groupRoomResolver) Group(ctx context.Context, obj *model.GroupRoom) (*model.Group, error) {
	var group *model.Group
	return group, r.DB.Preload("Members").Find(&group, "id = ?", obj.GroupID).Error
}

// CreateGroupRoom is the resolver for the createGroupRoom field.
func (r *mutationResolver) CreateGroupRoom(ctx context.Context, id string) (*model.GroupRoom, error) {
	return service.CreateGroupRoom(ctx, id)
}

// DeleteGroupRoom is the resolver for the deleteGroupRoom field.
func (r *mutationResolver) DeleteGroupRoom(ctx context.Context, id string) (*model.GroupRoom, error) {
	return service.DeleteGroupRoom(ctx, id)
}

// GetGroupRoom is the resolver for the getGroupRoom field.
func (r *queryResolver) GetGroupRoom(ctx context.Context, id string) (*model.GroupRoom, error) {
	return service.GetGroupRoom(ctx, id)
}

// GetMyGroupRoom is the resolver for the getMyGroupRoom field.
func (r *queryResolver) GetMyGroupRoom(ctx context.Context, id string) ([]*model.GroupRoom, error) {
	var rooms []*model.GroupRoom
	groups, err := service.GetMyGroup(ctx, id)
	fmt.Println(id)
	if err != nil {
		return nil, err
	}
	for _, g := range groups {
		fmt.Println(g.Name)
		room, err := r.GetGroupRoom(ctx, g.ID)
		if err != nil {
			return nil, err
		}
		rooms = append(rooms, room)
	}
	return rooms, nil
}

// GroupRoom returns graph.GroupRoomResolver implementation.
func (r *Resolver) GroupRoom() graph.GroupRoomResolver { return &groupRoomResolver{r} }

type groupRoomResolver struct{ *Resolver }

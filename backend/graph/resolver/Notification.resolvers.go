package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/shirloin/backend/graph"
	"github.com/shirloin/backend/graph/model"
	"github.com/shirloin/backend/service"
)

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, inputNotif model.NewNotification) (*model.Notification, error) {
	return service.CreateNotification(ctx, inputNotif)
}

// SendNotification is the resolver for the sendNotification field.
func (r *mutationResolver) SendNotification(ctx context.Context, id string, typeArg string) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: SendNotification - sendNotification"))
}

// UpdateNotificationStatus is the resolver for the updateNotificationStatus field.
func (r *mutationResolver) UpdateNotificationStatus(ctx context.Context, id string) (*model.Notification, error) {
	return service.UpdateNotificationStatus(ctx, id)
}

// Sender is the resolver for the sender field.
func (r *notificationResolver) Sender(ctx context.Context, obj *model.Notification) (*model.User, error) {
	return service.Sender(ctx, obj)
}

// Receiver is the resolver for the receiver field.
func (r *notificationResolver) Receiver(ctx context.Context, obj *model.Notification) (*model.User, error) {
	return service.Receiver(ctx, obj)
}

// GetNotification is the resolver for the getNotification field.
func (r *queryResolver) GetNotification(ctx context.Context, id string) ([]*model.Notification, error) {
	return service.GetNotification(ctx, id)
}

// Notification returns graph.NotificationResolver implementation.
func (r *Resolver) Notification() graph.NotificationResolver { return &notificationResolver{r} }

type notificationResolver struct{ *Resolver }

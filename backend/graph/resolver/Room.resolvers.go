package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/shirloin/backend/graph"
	"github.com/shirloin/backend/graph/model"
	"github.com/shirloin/backend/service"
)

// CreateRoom is the resolver for the createRoom field.
func (r *mutationResolver) CreateRoom(ctx context.Context, inputRoom model.NewRoom) (*model.Room, error) {
	return service.CreateRoom(ctx, inputRoom)
}

// GetRoom is the resolver for the getRoom field.
func (r *queryResolver) GetRoom(ctx context.Context, inputRoom model.NewRoom) (*model.Room, error) {
	return service.GetRoom(ctx, inputRoom)
}

// UserOne is the resolver for the user_one field.
func (r *roomResolver) UserOne(ctx context.Context, obj *model.Room) (*model.User, error) {
	var user *model.User
	err := r.DB.First(&user, "id = ?", obj.User_One_ID).Error
	return user, err
}

// UserTwo is the resolver for the user_two field.
func (r *roomResolver) UserTwo(ctx context.Context, obj *model.Room) (*model.User, error) {
	var user *model.User
	err := r.DB.First(&user, "id = ?", obj.User_Two_ID).Error
	return user, err
}

// Room returns graph.RoomResolver implementation.
func (r *Resolver) Room() graph.RoomResolver { return &roomResolver{r} }

type roomResolver struct{ *Resolver }

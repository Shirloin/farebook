package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/shirloin/backend/graph"
	"github.com/shirloin/backend/graph/model"
	"github.com/shirloin/backend/service"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, inputUser model.NewUser) (*model.User, error) {
	return service.CreateUser(ctx, inputUser)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, inputUser model.NewUser) (*model.User, error) {
	return service.UpdateUser(ctx, id, inputUser)
}

// VerifyUser is the resolver for the verifyUser field.
func (r *mutationResolver) VerifyUser(ctx context.Context, email string) (*model.User, error) {
	return service.VerifyUser(ctx, email)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, inputUser model.OldUser) (*model.LoginResponse, error) {
	return service.Login(ctx, inputUser.Email, inputUser.Password)
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	var user *model.User
	return user, r.DB.Find(&user, "id = ?", id).Error
}

// GetAllUser is the resolver for the getAllUser field.
func (r *queryResolver) GetAllUser(ctx context.Context) ([]*model.User, error) {
	var users []*model.User
	return users, r.DB.Find(&users).Error
}

// GetSearchUser is the resolver for the getSearchUser field.
func (r *queryResolver) GetSearchUser(ctx context.Context, str string) ([]*model.User, error) {
	return service.GetSearchUser(ctx, str)
}

// Notifications is the resolver for the notifications field.
func (r *userResolver) Notifications(ctx context.Context, obj *model.User) ([]*model.Notification, error) {
	return service.Notifications(ctx, obj)
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

// User returns graph.UserResolver implementation.
func (r *Resolver) User() graph.UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }

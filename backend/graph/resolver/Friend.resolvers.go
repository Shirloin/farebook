package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/shirloin/backend/graph"
	"github.com/shirloin/backend/graph/model"
	"github.com/shirloin/backend/service"
)

// UserOne is the resolver for the user_one field.
func (r *friendResolver) UserOne(ctx context.Context, obj *model.Friend) (string, error) {
	return service.UserOne(ctx, obj)
}

// UserTwo is the resolver for the user_two field.
func (r *friendResolver) UserTwo(ctx context.Context, obj *model.Friend) (string, error) {
	return service.UserTwo(ctx, obj)
}

// AddFriend is the resolver for the addFriend field.
func (r *mutationResolver) AddFriend(ctx context.Context, inputFriend model.InputFriend) (*model.Friend, error) {
	return service.AddFriend(ctx, inputFriend)
}

// ConfirmFriendRequest is the resolver for the confirmFriendRequest field.
func (r *mutationResolver) ConfirmFriendRequest(ctx context.Context, inputFriend model.InputFriend) (*model.Friend, error) {
	return service.ConfirmFriendRequest(ctx, inputFriend)
}

// RemoveFriendRequest is the resolver for the removeFriendRequest field.
func (r *mutationResolver) RemoveFriendRequest(ctx context.Context, inputFriend model.InputFriend) (*model.Friend, error) {
	return service.RemoveFriendRequest(ctx, inputFriend)
}

// GetFriend is the resolver for the getFriend field.
func (r *queryResolver) GetFriend(ctx context.Context, id string) ([]*model.User, error) {
	return service.GetFriend(ctx, id)
}

// GetFriendRequest is the resolver for the getFriendRequest field.
func (r *queryResolver) GetFriendRequest(ctx context.Context, id string) ([]*model.User, error) {
	return service.GetFriendRequest(ctx, id)
}

// GetPeopleYouMayKnow is the resolver for the getPeopleYouMayKnow field.
func (r *queryResolver) GetPeopleYouMayKnow(ctx context.Context, id string) ([]*model.User, error) {
	return service.GetPeopleYouMayKnow(ctx, id)
}

// GetMutuals is the resolver for the getMutuals field.
func (r *queryResolver) GetMutuals(ctx context.Context, inputFriend model.InputFriend) ([]*model.User, error) {
	return service.GetMutuals(ctx, inputFriend)
}

// IsFriend is the resolver for the isFriend field.
func (r *queryResolver) IsFriend(ctx context.Context, inputFriend model.InputFriend) (bool, error) {
	return service.IsFriend(ctx, inputFriend)
}

// Friend returns graph.FriendResolver implementation.
func (r *Resolver) Friend() graph.FriendResolver { return &friendResolver{r} }

type friendResolver struct{ *Resolver }

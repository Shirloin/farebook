package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/shirloin/backend/graph"
	"github.com/shirloin/backend/graph/model"
	"github.com/shirloin/backend/service/member"
)

// User is the resolver for the user field.
func (r *memberResolver) User(ctx context.Context, obj *model.Member) (*model.User, error) {
	return member.User(ctx, obj)
}

// Group is the resolver for the group field.
func (r *memberResolver) Group(ctx context.Context, obj *model.Member) (*model.Group, error) {
	return member.Group(ctx, obj)
}

// JoinGroup is the resolver for the joinGroup field.
func (r *mutationResolver) JoinGroup(ctx context.Context, inputMember model.NewMember) (*model.Member, error) {
	return member.JoinGroup(ctx, inputMember)
}

// LeaveGroup is the resolver for the leaveGroup field.
func (r *mutationResolver) LeaveGroup(ctx context.Context, groupID string, userID string) (*model.Member, error) {
	return member.LeaveGroup(ctx, groupID, userID)
}

// InviteMember is the resolver for the inviteMember field.
func (r *mutationResolver) InviteMember(ctx context.Context, groupID string, userID string, memberID string) (*model.Member, error) {
	return member.InviteMember(ctx, groupID, userID, memberID)
}

// ConfirmMember is the resolver for the confirmMember field.
func (r *mutationResolver) ConfirmMember(ctx context.Context, id string) (*model.Member, error) {
	return member.ConfirmMember(ctx, id)
}

// DeleteMember is the resolver for the deleteMember field.
func (r *mutationResolver) DeleteMember(ctx context.Context, id string) (*model.Member, error) {
	return member.DeleteMember(ctx, id)
}

// PromoteMember is the resolver for the promoteMember field.
func (r *mutationResolver) PromoteMember(ctx context.Context, id string) (*model.Member, error) {
	var member *model.Member
	if err := r.DB.First(&member, "id = ?", id).Error; err != nil {
		return nil, err
	}
	member.Role = "Admin"
	return member, r.DB.Save(&member).Error
}

// GetMember is the resolver for the getMember field.
func (r *queryResolver) GetMember(ctx context.Context, id string) ([]*model.Member, error) {
	return member.GetMember(ctx, id)
}

// GetAdmin is the resolver for the getAdmin field.
func (r *queryResolver) GetAdmin(ctx context.Context, id string) ([]*model.Member, error) {
	return member.GetAdmin(ctx, id)
}

// IsMember is the resolver for the isMember field.
func (r *queryResolver) IsMember(ctx context.Context, groupID string, userID string) (string, error) {
	return member.IsMember(ctx, groupID, userID)
}

// IsMemberByID is the resolver for the isMemberById field.
func (r *queryResolver) IsMemberByID(ctx context.Context, id string) (string, error) {
	return member.IsMemberByID(ctx, id)
}

// IsAdmin is the resolver for the isAdmin field.
func (r *queryResolver) IsAdmin(ctx context.Context, groupID string, userID string) (string, error) {
	var member *model.Member
	if err := r.DB.First(&member, "group_id = ? AND user_id = ? AND role = ?", groupID, userID, "Admin").Error; err != nil {
		return "False", nil
	}
	return "True", nil

}

// GetNonMemberFriend is the resolver for the getNonMemberFriend field.
func (r *queryResolver) GetNonMemberFriend(ctx context.Context, id string, groupID string) ([]*model.User, error) {
	return member.GetNonMemberFriend(ctx, id, groupID)
}

// Member returns graph.MemberResolver implementation.
func (r *Resolver) Member() graph.MemberResolver { return &memberResolver{r} }

type memberResolver struct{ *Resolver }

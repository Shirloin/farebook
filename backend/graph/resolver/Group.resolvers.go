package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/shirloin/backend/graph"
	"github.com/shirloin/backend/graph/model"
	"github.com/shirloin/backend/service"
)

// Members is the resolver for the members field.
func (r *groupResolver) Members(ctx context.Context, obj *model.Group) ([]*model.Member, error) {
	return service.Members(ctx, obj)
}

// Room is the resolver for the room field.
func (r *groupResolver) Room(ctx context.Context, obj *model.Group) (*model.GroupRoom, error) {
	panic(fmt.Errorf("not implemented: Room - room"))
}

// CreateGroup is the resolver for the createGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, inputGroup model.NewGroup) (*model.Group, error) {
	return service.CreateGroup(ctx, inputGroup)
}

// UpdateGroup is the resolver for the updateGroup field.
func (r *mutationResolver) UpdateGroup(ctx context.Context, id string, inputGroup model.NewGroup) (*model.Group, error) {
	return service.UpdateGroup(ctx, id, inputGroup)
}

// DeleteGroup is the resolver for the deleteGroup field.
func (r *mutationResolver) DeleteGroup(ctx context.Context, id string) (*model.Group, error) {
	return service.DeleteGroup(ctx, id)
}

// GetMyGroup is the resolver for the getMyGroup field.
func (r *queryResolver) GetMyGroup(ctx context.Context, id string) ([]*model.Group, error) {
	return service.GetMyGroup(ctx, id)
}

// GetAllGroup is the resolver for the getAllGroup field.
func (r *queryResolver) GetAllGroup(ctx context.Context) ([]*model.Group, error) {
	return service.GetAllGroup(ctx)
}

// GetGroup is the resolver for the getGroup field.
func (r *queryResolver) GetGroup(ctx context.Context, id string) (*model.Group, error) {
	return service.GetGroup(ctx, id)
}

// Group returns graph.GroupResolver implementation.
func (r *Resolver) Group() graph.GroupResolver { return &groupResolver{r} }

type groupResolver struct{ *Resolver }

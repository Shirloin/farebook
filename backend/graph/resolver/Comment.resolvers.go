package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/shirloin/backend/graph"
	"github.com/shirloin/backend/graph/model"
	"github.com/shirloin/backend/service/comment"
)

// User is the resolver for the user field.
func (r *commentResolver) User(ctx context.Context, obj *model.Comment) (*model.User, error) {
	return comment.User(ctx, obj)
}

// Post is the resolver for the post field.
func (r *commentResolver) Post(ctx context.Context, obj *model.Comment) (*model.Post, error) {
	return comment.Post(ctx, obj)
}

// Parent is the resolver for the parent field.
func (r *commentResolver) Parent(ctx context.Context, obj *model.Comment) (*model.Comment, error) {
	return comment.Parent(ctx, obj)
}

// Replies is the resolver for the replies field.
func (r *commentResolver) Replies(ctx context.Context, obj *model.Comment) ([]*model.Comment, error) {
	return comment.Replies(ctx, obj)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, inputComment model.NewComment) (*model.Comment, error) {
	return comment.CreateComment(ctx, inputComment)
}

// GetComment is the resolver for the getComment field.
func (r *queryResolver) GetComment(ctx context.Context, id string) ([]*model.Comment, error) {
	return comment.GetComment(ctx, id)
}

// GetCommentCount is the resolver for the getCommentCount field.
func (r *queryResolver) GetCommentCount(ctx context.Context, id string) (int, error) {
	var count int64
	var comment []*model.Comment
	return int(count), r.DB.Find(&comment, "post_id = ?", id).Count(&count).Error
}

// Comment returns graph.CommentResolver implementation.
func (r *Resolver) Comment() graph.CommentResolver { return &commentResolver{r} }

type commentResolver struct{ *Resolver }

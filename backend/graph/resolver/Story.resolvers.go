package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/shirloin/backend/graph"
	"github.com/shirloin/backend/graph/model"
	"github.com/shirloin/backend/service/story"
)

// CreateStory is the resolver for the createStory field.
func (r *mutationResolver) CreateStory(ctx context.Context, inputStory model.NewStory) (*model.Story, error) {
	return story.CreateStory(ctx, inputStory)
}

// GetMyStory is the resolver for the getMyStory field.
func (r *queryResolver) GetMyStory(ctx context.Context, id string) ([]*model.Story, error) {
	return story.GetMyStory(ctx, id)
}

// GetFriendStory is the resolver for the getFriendStory field.
func (r *queryResolver) GetFriendStory(ctx context.Context, id string) ([]*model.Story, error) {
	return story.GetFriendStory(ctx, id)
}

// GetStoryByUser is the resolver for the getStoryByUser field.
func (r *queryResolver) GetStoryByUser(ctx context.Context, id string) (*model.User, error) {
	return story.GetStoryByUser(ctx, id)
}

// GetStoryByFriend is the resolver for the getStoryByFriend field.
func (r *queryResolver) GetStoryByFriend(ctx context.Context, id string) ([]*model.User, error) {
	return story.GetStoryByFriend(ctx, id)
}

// User is the resolver for the user field.
func (r *storyResolver) User(ctx context.Context, obj *model.Story) (*model.User, error) {
	return story.User(ctx, obj)
}

// Story returns graph.StoryResolver implementation.
func (r *Resolver) Story() graph.StoryResolver { return &storyResolver{r} }

type storyResolver struct{ *Resolver }

package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/shirloin/backend/graph"
	"github.com/shirloin/backend/graph/model"
	"github.com/shirloin/backend/service"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, inputPost model.NewPost) (*model.Post, error) {
	return service.CreatePost(ctx, inputPost)
}

// UpdatePostPrivacy is the resolver for the updatePostPrivacy field.
func (r *mutationResolver) UpdatePostPrivacy(ctx context.Context, id string, privacy string) (*model.Post, error) {
	return service.UpdatePostPrivacy(ctx, id, privacy)
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (*model.Post, error) {
	return service.DeletePost(ctx, id)
}

// User is the resolver for the user field.
func (r *postResolver) User(ctx context.Context, obj *model.Post) (*model.User, error) {
	var user *model.User
	return user, r.DB.Find(&user, "id = ?", obj.UserID).Error
}

// Comment is the resolver for the comment field.
func (r *postResolver) Comment(ctx context.Context, obj *model.Post) ([]*model.Comment, error) {
	var comment []*model.Comment
	return comment, r.DB.Find(&comment, "post_id = ?", obj.ID).Error
}

// GetPost is the resolver for the getPost field.
func (r *queryResolver) GetPost(ctx context.Context, id string) (*model.Post, error) {
	return service.GetPost(ctx, id)
}

// GetUserPost is the resolver for the getUserPost field.
func (r *queryResolver) GetUserPost(ctx context.Context, id string) ([]*model.Post, error) {
	return service.GetUserPost(ctx, id)
}

// GetAllPost is the resolver for the getAllPost field.
func (r *queryResolver) GetAllPost(ctx context.Context) ([]*model.Post, error) {
	return service.GetAllPost(ctx)
}

// GetSearchPost is the resolver for the getSearchPost field.
func (r *queryResolver) GetSearchPost(ctx context.Context, str string) ([]*model.Post, error) {
	return service.GetSearchPost(ctx, str)
}

// GetGroupPost is the resolver for the getGroupPost field.
func (r *queryResolver) GetGroupPost(ctx context.Context, id string) ([]*model.Post, error) {
	return service.GetGroupPost(ctx, id)
}

// Post returns graph.PostResolver implementation.
func (r *Resolver) Post() graph.PostResolver { return &postResolver{r} }

type postResolver struct{ *Resolver }
